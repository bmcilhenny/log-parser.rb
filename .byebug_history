exit
db_tables_hash_map
db_tables_hash_map.max_by{|k,v| v}.first
exit
db_tables_hash_map
c
db_table
exit
line.scan(/FROM \"(.*?)"|JOIN \"(.*?)"/)
db_table
exit
total_sql
exit
total_sql
exit
exi
line.scan(/JOIN \"(.*?)"/).flatten
line.scan(/FROM \"(.*?)"/).flatten
db_table
exit
db_table
exit
db_tables_hash_map
exit
avg_serv = (time_served/pages_served).round(2)
exit
avg_serv = (time_served/heroku_router_count).round(2)
exit
(total_serv/heroku_router_count).round(2)
total_serv/heroku_router_count.round(2)
total_serv/heroku_router_count
total_served/heroku_router_count
length
heroku_router_count
heroku_routers
total_sql
exit
total_sql
heroku_routers
exit
heroku_routers
total_sql
exit
exi
total_sql
exit
total_sql
heroku_routers
exit
db_tables_hash_map
exit
db_tables_hash_map
most_common_db_tabledb_tables_hash_map
exit
db_tables_hash_map.max_by{|k,v| v}.first
db_tables_hash_map.max_by{|k,v| v}
db_tables_hash_map.max
db_tables_hash_map
max = db_tables_hash_map.values.max
db_tables_hash_map.values.max
db_tables_hash_map.values.max.index
db_tables_hash_map.values.max
db_tables_hash_map.values
db_tables_hash_map
exit
db_tables_hash_map
db_table.each{|db_table| db_tables_hash_map[db_table] += 1}
db_table.{|db_table| db_tables_hash_map[db_table] += 1}
db_table = line.scan(/FROM \"(.*?)" /).flatten
line.scan(/FROM \"(.*?)" /).flatten
exit
db_table = line.scan(/FROM \"(.*?)" /).flatten.first
line.scan(/FROM \"(.*?)" /).flatten.first
line.scan(/FROM \"(.*?)" /).flatten
line.scan(/FROM \"(.*?)" /)
line
line.scan(/SELECT \"(.*?)\"/)
n
line.scan(/SELECT \"(.*?)\"/)
line.scan(/SELECT \"(.*?)\"/
exit
missing_errors
n
exit
nil.blank?
nil.nil?
hey.blank?
hey = nil
nil.blank
nil.blank?
nil.empty?
host + path
host
path
exit
[].first
service.flatten
service
service = line.scan(/service=(\d+)ms/)
service = line.scan(/service=(\d+)ms/).flatten
line = "dededed"
service = line.scan(/service=(\d+)ms/).flatten
service = line.scan(/service=(\d+)+ms/).flatten
service = line.scan(/service=(\d+)+ms/).flattent
service = line.scan(/service=(\d+)+ms/).first.first
service = line.scan(/service=(\d+)+ms/).first
service = line.scan(/service=(\d+)+ms/)
service = line.scan(/service=(\d)+ms/)
service = line.scan(/service=\d+ms/)
service = line.scan(/service=(\d+)ms/)
url = line.scan(/host=([^\s]+)/)
url = line.scan(/host=(.+)([^\s]+)/)
url = line.scan(/host=(.+)/)
url = line.scan(/host=.(.*)/)
url = line.scan(/host=.(.*))
url = line.scan(/host=.+$\s/)
url = line.scan(/host=.+\s/)
url = line.scan(/host=.*\s/)
url = line.scan(/host=.*\s /)
url = line.scan(/host=.* /)
url = line.scan(/host=.*/)
url = line.scan(/host=.*$/)
url = line.scan(/host=.*?/)
url = line.scan(/host=(.*?)/)
url = line.scan(/host=(.*?)/).first
url = line.scan(/host=[.*?]/).first
url = line.scan(/host=.[*?]/).first
url = line.scan(/host=.*?/).first
url.first
url.first.
url.first
url = line.scan(/path=\".*?\"/)
missing_error = line.match?(/status=404/)
exit
avg_serv
avg_serv.round(2)
errors_sum.round(2)
avg_serv
exit
avg_serv
exit
9.to_f
9/9.0
avg_serv
exit
avg_serv
exit
c
total_serv
n
exit
!![].length
[].length
service
exit
total_serv
exit
service.first.scan(/\d+/).first.to_i
service.first.scan(/\d+/).to_i
service.first.scan(/\d+/)
service.scan(/\d+/)
service
serv_time
    serv_time = service.find(/\d+/) if service
service = line.scan(/service=\d+ms/)
line.scan(/service=\d+ms/)
line.scan(/service=\d+/)
line.scan(/service=[\d*]/)
line.scan(/service=[\d+]/)
line.scan(/service=[\d+]ms/)
line.scan(/service=[\d+]/)
c
line.scan(/service=[\d+]/)
line.scan(/service=[/d+]/)
exit
lines.length
lines.first
lines
lines.length
exit
c
line
error
exit
error
exit
error = line[/status=404/, 1]
error = line[/status=404/]
error = line[/status=404/, 1]
line
exit
path = line[/path=([^\s]+)/, 1]
line.split(' ')
line
